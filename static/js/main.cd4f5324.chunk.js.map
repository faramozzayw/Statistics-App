{"version":3,"sources":["components/Jumbotron.jsx","function/Calculation.js","function/ParseToArray.js","components/Form.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Component","Calculation","x","n","console","log","concat","resultObject","average","deviation","variance","sumOfN","reduce","accumulator","currentValue","result","i","length","Math","pow","sqrt","ParseToArray","string","array","split","push","Number","state","handleInputChange","e","_this","setState","Object","defineProperty","target","name","value","handleClick","preventDefault","clear","regExp","RegExp","test","trim","alert","_ref","type","placeholder","id","this","onChange","bind","onClick","App","Jumbotron_Jumbotron","Form_default","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd4f5324.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Jumbotron extends Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"uk-section uk-section-primary\">\r\n\t\t\t  <div className=\"uk-container\">\r\n\t\t\t    <h1 className=\"\">Statistics App</h1>\r\n\t\t\t    <h3>Application for finding the average statistical, Root mean square and the variance value</h3>\r\n\t\t\t  </div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t};\r\n};","const Calculation = (x, n) => {\r\n\tconsole.log(`\r\n\t\t[x]: ${x}\r\n\t\t[n]: ${n}\r\n\t`);\r\n\r\n\tlet resultObject = {\r\n\t\taverage: null,\r\n\t\tdeviation: null,\r\n\t\tvariance: null\r\n\t};\r\n\r\n\tlet sumOfN = n.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\tconsole.log(\"[sumOfN]: \", sumOfN);\r\n\r\n\tresultObject.average = (() => {\r\n\t\tlet result = 0;\r\n\t\tfor (let i = 0; i < x.length; i++) {\r\n\t\t\tresult += x[i] * n[i];\r\n\t\t}\r\n\t\tresult /= sumOfN;\r\n\t\treturn result;\r\n\t})();\r\n\r\n\tresultObject.variance = (() => {\r\n\t\tlet result = 0;\r\n\t\tfor (let i = 0; i < x.length; i++) {\r\n\t\t\tresult += ((x[i] - resultObject.average) ** 2) * n[i];\r\n\t\t}\r\n\t\tresult /= sumOfN;\r\n\t\treturn result;\r\n\t})();\r\n\r\n\tresultObject.deviation = (() => {\r\n\t\treturn Math.sqrt(resultObject.variance)\r\n\t})();\r\n\r\n\treturn resultObject;\r\n}\r\n\r\nexport default Calculation;","const ParseToArray = string => {\r\n\tlet array = string.split(',');\r\n\tlet result = [];\r\n\tfor(let i = 0; i < array.length; i++)\r\n\t\tresult.push(Number(array[i]));\r\n\treturn result;\r\n}\r\n\r\nexport default ParseToArray;","import React, { Component } from 'react';\r\nimport Calculation from './../function/Calculation';\r\nimport ParseToArray from './../function/ParseToArray';\r\n\r\nexport default class  extends Component {\r\n\tstate = {\r\n\t\tx:'',\r\n\t\tn: '',\r\n\t\tresult: {}\r\n\t}\r\n\r\n\thandleInputChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n\thandleClick = e => {\r\n\t\te.preventDefault();\r\n\t\tconsole.clear();\r\n\t\tlet regExp = new RegExp('/[a-zа-я\\.]/gi');\r\n\r\n\t\tif (regExp.test(this.state.x) || regExp.test(this.state.n) \r\n\t\t\t|| this.state.x.trim() === '' || this.state.n.trim() === '') {\r\n\t\t\talert('Input error. Check the correctness of the data.')\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst [x, n] = [ParseToArray(this.state.x), ParseToArray(this.state.n)]\r\n\t\tif (x.length !== n.length) {\r\n\t\t\talert('Input error. Check the correctness of the data.')\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet result = Calculation(x, n);\r\n\t\tconsole.log(\"result\", result);\r\n\t}\r\n\r\n\trender()  {\r\n\t\treturn (\r\n\t\t\t<div className=\"uk-container\">\r\n\t\t\t\t<form>\r\n\t\t\t    <fieldset className=\"uk-fieldset\">\r\n\t\t\t        <legend className=\"uk-legend\">A inputting data</legend>\t\t\r\n\t\t\t        <div className=\"uk-margin\">\r\n\t\t\t        \t<div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Input a value\" id=\"x\"\r\n\t\t\t            \t\t\t\tvalue={this.state.x}\r\n\t\t\t            \t\t\t\tname='x'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t         \t</div>\r\n\t\t\t         \t<div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Input a frequency\" id=\"n\"\r\n\t\t\t            \t\t\t\tvalue={this.state.n}\r\n\t\t\t            \t\t\t\tname='n'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t         \t</div>\t\t\t\t\r\n\t\t\t        \t\t<button className=\"uk-button uk-button-primary\"\r\n\t\t\t        \t\tonClick={this.handleClick.bind(this)}>Start calculus</button>\r\n\t\t\t        </div>\r\n\t\t\t    </fieldset>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport Jumbotron from './Jumbotron';\nimport Form from './Form';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron />\n        <main className=\"App-body\">\n          <Form />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './uikit/css/uikit.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}