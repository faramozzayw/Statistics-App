{"version":3,"sources":["components/Jumbotron.jsx","modules/Calculation.js","modules/ParseToArray.js","components/Card.jsx","components/HelpCard.jsx","components/Form.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Component","Calculation","x","n","resultObject","average","deviation","variance","sumOfN","reduce","accumulator","currentValue","result","i","length","Math","pow","sqrt","ParseToArray","string","array","split","trim","push","Number","Card","_ref","HelpCard","Form","state","canGetResult","showResult","showHelp","handleInputChange","e","_this$setState","_this","setState","Object","defineProperty","target","name","value","handleClick","preventDefault","console","clear","regExp","test","alert","assign","getResultClick","getHelpClick","resultCard","this","components_Card","resultButtonText","helpCard","components_HelpCard","type","placeholder","id","onChange","bind","onClick","concat","App","Jumbotron_Jumbotron","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343060de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Jumbotron extends Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"uk-section uk-section-primary\">\r\n\t\t\t  <div className=\"uk-container\">\r\n\t\t\t    <h1 className=\"\">Statistics App</h1>\r\n\t\t\t    <h3>Application for finding the average statistical, Root mean square and the variance value</h3>\r\n\t\t\t  </div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t};\r\n};","const Calculation = (x, n) => {\r\n\tlet resultObject = {\r\n\t\taverage: null,\r\n\t\tdeviation: null,\r\n\t\tvariance: null\r\n\t};\r\n\r\n\tlet sumOfN = n.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n\tresultObject.average = (() => {\r\n\t\tlet result = 0;\r\n\t\tfor (let i = 0; i < x.length; i++) {\r\n\t\t\tresult += x[i] * n[i];\r\n\t\t}\r\n\t\tresult /= sumOfN;\r\n\t\treturn result;\r\n\t})();\r\n\r\n\tresultObject.variance = (() => {\r\n\t\tlet result = 0;\r\n\t\tfor (let i = 0; i < x.length; i++) {\r\n\t\t\tresult += ((x[i] - resultObject.average) ** 2) * n[i];\r\n\t\t}\r\n\t\tresult /= sumOfN;\r\n\t\treturn result;\r\n\t})();\r\n\r\n\tresultObject.deviation = (() => {\r\n\t\treturn Math.sqrt(resultObject.variance)\r\n\t})();\r\n\r\n\treturn resultObject;\r\n}\r\n\r\nexport default Calculation;","const ParseToArray = string => {\r\n\tlet array = string.split(',');\r\n\tlet result = [];\r\n\tfor(let i = 0; i < array.length; i++) {\r\n\t\tarray[i].trim() !== '' && result.push(Number(array[i]));\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport default ParseToArray;","import React from 'react';\r\n\r\nconst Card = ({average, deviation, variance}) => {\r\n  return (\r\n    <div className=\"Card\">\r\n      <div className=\"uk-card uk-card-default uk-card-small uk-card-body\">\r\n        <div className=\"uk-card-header\">\r\n              <div className=\"uk-grid-small uk-flex-middle uk-grid\">\r\n                  <div className=\"uk-width-expand\">\r\n                      <h3 className=\"uk-card-title uk-margin-remove-bottom\">Your result</h3>\r\n                      <p className=\"uk-text-meta uk-margin-remove-top\"></p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div className=\"uk-card-body\">\r\n              <p>Average statistical: \r\n                <br/>\r\n                <span className=\"uk-text-emphasis\">{average}</span>\r\n               </p>\r\n              <p>Root mean square: \r\n                <br/>\r\n                <span className=\"uk-text-emphasis\">{deviation}</span>\r\n               </p>\r\n              <p>The variance value: \r\n                <br/>\r\n                <span className=\"uk-text-emphasis\">{variance}</span>\r\n               </p>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst HelpCard = () => {\r\n  return (\r\n    <div className=\"Card uk-margin-small-bottom\">\r\n      <div className=\"uk-card uk-card-default uk-card-small uk-card-body\">\r\n          <div className=\"uk-card-body\">\r\n            <p>First input is values. They must be sorted as n<sub>i</sub> {\"<\"}  n<sub>{\"i+1\"}</sub>. Values must be separated by commas.</p>\r\n            <p>Example: 1,2,3,4,5,6</p>\r\n            <p>First input is frequency. Frequencies must be separated by commas.</p>\r\n            <p>Example: 3,6,7,11,5,9</p>\r\n            <div className=\"uk-card-footer\">\r\n            \t<p>Amount of values and amount of  frequencies must be identically!</p>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HelpCard;\r\n","import React, { Component } from 'react';\r\n\r\nimport Calculation from './../modules/Calculation';\r\nimport ParseToArray from './../modules/ParseToArray';\r\n\r\nimport Card from './Card';\r\nimport HelpCard from './HelpCard';\r\n\r\nexport default class Form extends Component {\r\n\tstate = {\r\n\t\tx:'',\r\n\t\tn: '',\r\n\t\tresult: {\r\n\t\t\taverage: null,\r\n\t\t\tdeviation: null,\r\n\t\t\tvariance: null\r\n\t\t},\r\n\t\tcanGetResult: false,\r\n\t\tshowResult: false,\r\n\t\tshowHelp: false\r\n\t}\r\n\r\n\thandleInputChange = e => this.setState({\r\n\t\t[e.target.name]: e.target.value,\r\n\t\tcanGetResult: false,\r\n\t\tshowResult: false\r\n\t})\r\n\r\n\thandleClick = e => {\r\n\t\te.preventDefault();\r\n\t\tconsole.clear();\r\n\r\n\t\tlet regExp = /[a-zа-я]/g;\r\n\r\n\t\tif (regExp.test(this.state.x) || regExp.test(this.state.n) \r\n\t\t\t|| this.state.x.trim() === '' || this.state.n.trim() === '') {\r\n\t\t\talert('Input error. Review the correctness of the data.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst [x, n] = [ParseToArray(this.state.x), ParseToArray(this.state.n)];\r\n\t\tif (x.length !== n.length) {\r\n\t\t\talert('Input error. Review the correctness of the data.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < x.length; i++) {\r\n\t\t\tif (x[i] >= x[i + 1]) {\r\n\t\t\t\talert('Input error. Review the correctness of the data.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet result = Calculation(x, n);\r\n\t\tthis.setState({\r\n\t\t\tresult: Object.assign(result),\r\n\t\t\tcanGetResult: true\r\n\t\t});\r\n\t}\r\n\r\n\tgetResultClick = e => {\r\n\t\te.preventDefault();\r\n\t\tthis.state.canGetResult && this.setState({ showResult: !this.state.showResult });\r\n\t}\r\n\r\n\tgetHelpClick = e => {\r\n\t\te.preventDefault();\r\n\r\n\t\tthis.setState({\r\n\t\t\tshowHelp: !this.state.showHelp\r\n\t\t})\r\n\t}\r\n\r\n\trender()  {\r\n\t\tconst resultCard = this.state.showResult && (\r\n\t\t\t<Card average={this.state.result.average} deviation={this.state.result.deviation} variance={this.state.result.variance} />\r\n\t\t);\r\n\t\tconst resultButtonText = this.state.showResult ? \"Hide result\" : \"Show result\";\r\n\t\tconst helpCard = this.state.showHelp && <HelpCard/>;\r\n\t\treturn (\r\n\t\t\t<div className=\"uk-container uk-width-large\">\r\n\t\t\t\t<form>\r\n\t\t\t    <fieldset className=\"uk-fieldset\">\r\n\t\t\t        <legend className=\"uk-legend\">A inputting data</legend>\t\t\r\n\t\t\t        <div className=\"uk-margin\">\r\n\t\t\t        \t<div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Input a value\" id=\"x\"\r\n\t\t\t            \t\t\t\tvalue={this.state.x}\r\n\t\t\t            \t\t\t\tname='x'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t         \t</div>\r\n\t\t\t         \t<div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Input a frequency\" id=\"n\"\r\n\t\t\t            \t\t\t\tvalue={this.state.n}\r\n\t\t\t            \t\t\t\tname='n'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t        </div>\t\t\t\t\r\n\t\t\t        <button className=\"uk-button uk-button-primary uk-width-1-1 uk-margin-small-bottom\"\r\n\t\t\t        \t\tonClick={this.handleClick.bind(this)}>Start calculus</button>\r\n\t\t\t        <button className=\"uk-button uk-button-danger uk-width-1-1 uk-margin-small-bottom\"\r\n\t\t\t        \t\tonClick={this.getHelpClick.bind(this)}>Need help?</button>\r\n\t\t\t        {helpCard}\r\n\t\t\t        <button className={`uk-button ${ this.state.canGetResult ? \"uk-button-primary\" : \"uk-button-secondary\" } uk-width-1-1 uk-margin-small-bottom` }\r\n\t\t\t        \t\tonClick={this.getResultClick.bind(this)}>{resultButtonText}</button>\r\n\t\t\t        </div>\r\n\t\t\t    </fieldset>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t\t{resultCard}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../css/App.css';\r\nimport Jumbotron from './Jumbotron';\r\nimport Form from './Form';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Jumbotron />\r\n        <main className=\"App-body\">\r\n          <Form/>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './uikit/css/uikit.min.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}